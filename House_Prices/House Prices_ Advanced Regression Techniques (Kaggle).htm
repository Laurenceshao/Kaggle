<!DOCTYPE html>
<!-- saved from url=(0070)https://jackdry.com/house-prices-advanced-regression-techniques-kaggle -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>House Prices: Advanced Regression Techniques (Kaggle)</title><link rel="stylesheet" href="./House Prices_ Advanced Regression Techniques (Kaggle)_files/style.css"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="stylesheet" href="./House Prices_ Advanced Regression Techniques (Kaggle)_files/katex.min.css" integrity="sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq" crossorigin="anonymous"><link rel="icon" type="image/png" href="https://jackdry.com/images/favicon.png" sizes="32x32"><link rel="apple-touch-icon" type="image/png" href="https://jackdry.com/images/logo.png"><link rel="canonical" href="https://jackdry.com/house-prices-advanced-regression-techniques-kaggle"><meta name="description" content="In this article, we average a stacked ensemble with its base learners and a strong public kernel to rank in the top 10% in the Kaggle competition House Prices: Advanced Regression Techniques."><meta property="og:site_name" content="Jack Dry"><meta property="og:type" content="website"><meta property="og:title" content="House Prices: Advanced Regression Techniques (Kaggle)"><meta property="og:description" content="In this article, we average a stacked ensemble with its base learners and a strong public kernel to rank in the top 10% in the Kaggle competition House Prices: Advanced Regression Techniques."><meta property="og:image" content="https://jackdry.s3.us-east-2.amazonaws.com/content/articles/house-prices-advanced-regression-techniques-kaggle/image.png"><meta property="og:url" content="https://jackdry.com/house-prices-advanced-regression-techniques-kaggle"><meta name="twitter:site" content="@jackdry2"><meta property="twitter:title" content="House Prices: Advanced Regression Techniques (Kaggle)"><meta name="twitter:description" content="In this article, we average a stacked ensemble with its base learners and a strong public kernel to rank in the top 10% in the Kaggle competition House Prices: Advanced Regression Techniques."><meta property="twitter:image" content="https://jackdry.s3.us-east-2.amazonaws.com/content/articles/house-prices-advanced-regression-techniques-kaggle/image.png"><meta name="twitter:card" content="summary"><!-- only track analytics in production--><script type="text/javascript" async="" src="./House Prices_ Advanced Regression Techniques (Kaggle)_files/analytics.js"></script><script async="" src="./House Prices_ Advanced Regression Techniques (Kaggle)_files/js"></script><!-- need the . after script!--><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-141748496-1');</script></head><body data-gr-c-s-loaded="true"><header><h3><a class="name hu" href="https://jackdry.com/">Jack Dry            </a></h3></header><div class="content"><div class="article"><h1>House Prices: Advanced Regression Techniques (Kaggle)</h1><div class="article__meta"><a class="hu"><time class="right" datetime="2020-01-08T12:24:59.098Z">a month ago</time></a><a class="hu right" href="https://jackdry.com/house-prices-advanced-regression-techniques-kaggle#comments">0 comments</a></div><hr><div class="article__content"><p>In this article, we'll average a stacked ensemble with its base learners and a strong public kernel to rank in the top 10% in the Kaggle competition <a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques">House Prices: Advanced Regression Techniques</a>.</p>
<p>The competition challenges teams to predict the sale price of houses in Ames, Iowa, given 79 explanatory variables, each of which is described <a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data">here</a>.</p>
<p>If you aren't familiar with ensemble methods, I recommend reading the <a href="https://mlwave.com/kaggle-ensembling-guide/">Kaggle Ensembling Guide</a>, <a href="https://scikit-learn.org/stable/modules/ensemble.html">Scikit-learn's documentation</a> and the <a href="https://en.wikipedia.org/wiki/Ensemble_learning">Wikipedia page</a>.</p>
<p>The full code and data for this article are available here: <a href="https://github.com/jackdry/house-prices-advanced-regression-techniques-kaggle">https://github.com/jackdry/house-prices-advanced-regression-techniques-kaggle</a>.</p>
<h2>Import packages</h2>
<pre class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Ridge<span class="token punctuation">,</span> Lasso<span class="token punctuation">,</span> LinearRegression
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token punctuation">,</span> RandomizedSearchCV
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token punctuation">,</span> make_scorer
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> GradientBoostingRegressor
<span class="token keyword">from</span> mlxtend<span class="token punctuation">.</span>regressor <span class="token keyword">import</span> StackingCVRegressor
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> RobustScaler
<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> boxcox_normmax<span class="token punctuation">,</span> zscore
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> cpu_count
<span class="token keyword">from</span> lightgbm <span class="token keyword">import</span> LGBMRegressor
<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>special <span class="token keyword">import</span> boxcox1p
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVR
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
</pre>
<h2>Read data</h2>
<pre class="language-python">train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"train.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"test.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
sample <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"sample_submission.csv"</span><span class="token punctuation">)</span>
</pre>
<pre class="language-python">train<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre>
<pre class="output">    MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape LandContour Utilities LotConfig LandSlope Neighborhood Condition1 Condition2 BldgType HouseStyle  OverallQual  OverallCond  YearBuilt  YearRemodAdd RoofStyle RoofMatl Exterior1st Exterior2nd MasVnrType  MasVnrArea ExterQual ExterCond Foundation BsmtQual BsmtCond BsmtExposure BsmtFinType1  BsmtFinSF1 BsmtFinType2  BsmtFinSF2  BsmtUnfSF  TotalBsmtSF Heating HeatingQC CentralAir Electrical  1stFlrSF  2ndFlrSF  LowQualFinSF  GrLivArea  BsmtFullBath  BsmtHalfBath  FullBath  HalfBath  BedroomAbvGr  KitchenAbvGr KitchenQual  TotRmsAbvGrd Functional  Fireplaces FireplaceQu GarageType  GarageYrBlt GarageFinish  GarageCars  GarageArea GarageQual GarageCond PavedDrive  WoodDeckSF  OpenPorchSF  EnclosedPorch  3SsnPorch  ScreenPorch  PoolArea PoolQC Fence MiscFeature  MiscVal  MoSold  YrSold SaleType SaleCondition  SalePrice
Id
1           60       RL         65.0     8450   Pave   NaN      Reg         Lvl    AllPub    Inside       Gtl      CollgCr       Norm       Norm     1Fam     2Story            7            5       2003          2003     Gable  CompShg     VinylSd     VinylSd    BrkFace       196.0        Gd        TA      PConc       Gd       TA           No          GLQ         706          Unf           0        150          856    GasA        Ex          Y      SBrkr       856       854             0       1710             1             0         2         1             3             1          Gd             8        Typ           0         NaN     Attchd       2003.0          RFn           2         548         TA         TA          Y           0           61              0          0            0         0    NaN   NaN         NaN        0       2    2008       WD        Normal     208500
2           20       RL         80.0     9600   Pave   NaN      Reg         Lvl    AllPub       FR2       Gtl      Veenker      Feedr       Norm     1Fam     1Story            6            8       1976          1976     Gable  CompShg     MetalSd     MetalSd       None         0.0        TA        TA     CBlock       Gd       TA           Gd          ALQ         978          Unf           0        284         1262    GasA        Ex          Y      SBrkr      1262         0             0       1262             0             1         2         0             3             1          TA             6        Typ           1          TA     Attchd       1976.0          RFn           2         460         TA         TA          Y         298            0              0          0            0         0    NaN   NaN         NaN        0       5    2007       WD        Normal     181500
3           60       RL         68.0    11250   Pave   NaN      IR1         Lvl    AllPub    Inside       Gtl      CollgCr       Norm       Norm     1Fam     2Story            7            5       2001          2002     Gable  CompShg     VinylSd     VinylSd    BrkFace       162.0        Gd        TA      PConc       Gd       TA           Mn          GLQ         486          Unf           0        434          920    GasA        Ex          Y      SBrkr       920       866             0       1786             1             0         2         1             3             1          Gd             6        Typ           1          TA     Attchd       2001.0          RFn           2         608         TA         TA          Y           0           42              0          0            0         0    NaN   NaN         NaN        0       9    2008       WD        Normal     223500
4           70       RL         60.0     9550   Pave   NaN      IR1         Lvl    AllPub    Corner       Gtl      Crawfor       Norm       Norm     1Fam     2Story            7            5       1915          1970     Gable  CompShg     Wd Sdng     Wd Shng       None         0.0        TA        TA     BrkTil       TA       Gd           No          ALQ         216          Unf           0        540          756    GasA        Gd          Y      SBrkr       961       756             0       1717             1             0         1         0             3             1          Gd             7        Typ           1          Gd     Detchd       1998.0          Unf           3         642         TA         TA          Y           0           35            272          0            0         0    NaN   NaN         NaN        0       2    2006       WD       Abnorml     140000
5           60       RL         84.0    14260   Pave   NaN      IR1         Lvl    AllPub       FR2       Gtl      NoRidge       Norm       Norm     1Fam     2Story            8            5       2000          2000     Gable  CompShg     VinylSd     VinylSd    BrkFace       350.0        Gd        TA      PConc       Gd       TA           Av          GLQ         655          Unf           0        490         1145    GasA        Ex          Y      SBrkr      1145      1053             0       2198             1             0         2         1             4             1          Gd             9        Typ           1          TA     Attchd       2000.0          RFn           3         836         TA         TA          Y         192           84              0          0            0         0    NaN   NaN         NaN        0      12    2008       WD        Normal     250000
</pre>
<pre class="language-python">train<span class="token punctuation">.</span>shape
</pre>
<pre class="output">(1460, 80)
</pre>
<h2>Concatenate training and test features</h2>
<p>We concatenate features so that we don't have to impute missing values, transform features, etc., separately for the training and test sets.</p>
<p>First, however, we remove houses from the training set with ground living area greater than 4,500 sq. ft, since, as shown by the plot below, these are outliers.</p>
<pre class="language-python">fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">"GrLivArea"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">"SalePrice"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"#3f72af"</span><span class="token punctuation">,</span> zorder<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span><span class="token number">4500</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"#112d4e"</span><span class="token punctuation">,</span> ls<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> zorder<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"Ground living area (sq. ft)"</span><span class="token punctuation">,</span> labelpad<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"Sale price ($)"</span><span class="token punctuation">,</span> labelpad<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre>
<pre class="output"><img src="./House Prices_ Advanced Regression Techniques (Kaggle)_files/outliers.png">
</pre>
<pre class="language-python">train <span class="token operator">=</span> train<span class="token punctuation">[</span>train<span class="token punctuation">[</span><span class="token string">"GrLivArea"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">4500</span><span class="token punctuation">]</span>
X <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"SalePrice"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test<span class="token punctuation">]</span><span class="token punctuation">)</span>
</pre>
<h2>Transform target variable</h2>
<!-- TODO: explain why we transform. -->
<pre class="language-python">y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">"SalePrice"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</pre>
<h2>Impute missing values</h2>
<p>The plot below shows the number of missing values in columns with at least one missing value.</p>
<pre class="language-python">nans <span class="token operator">=</span> X<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
nans <span class="token operator">=</span> nans<span class="token punctuation">[</span>nans <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">]</span>
fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>nans<span class="token punctuation">.</span>index<span class="token punctuation">,</span> nans<span class="token punctuation">.</span>values<span class="token punctuation">,</span> zorder<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"#3f72af"</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"No. of missing values"</span><span class="token punctuation">,</span> labelpad<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>set_xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nans<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.4</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_tick_params<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre>
<pre class="output"><img src="./House Prices_ Advanced Regression Techniques (Kaggle)_files/nans.png">
</pre>
<p>We impute the missing values in these columns using the code below.</p>
<pre class="language-python">cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"PoolQC"</span><span class="token punctuation">,</span> <span class="token string">"MiscFeature"</span><span class="token punctuation">,</span> <span class="token string">"Alley"</span><span class="token punctuation">,</span> <span class="token string">"Fence"</span><span class="token punctuation">,</span> <span class="token string">"FireplaceQu"</span><span class="token punctuation">,</span> <span class="token string">"GarageCond"</span><span class="token punctuation">,</span> <span class="token string">"GarageQual"</span><span class="token punctuation">,</span> <span class="token string">"GarageFinish"</span><span class="token punctuation">,</span> <span class="token string">"GarageType"</span><span class="token punctuation">,</span> <span class="token string">"BsmtCond"</span><span class="token punctuation">,</span> <span class="token string">"BsmtExposure"</span><span class="token punctuation">,</span> <span class="token string">"BsmtQual"</span><span class="token punctuation">,</span> <span class="token string">"BsmtFinType2"</span><span class="token punctuation">,</span> <span class="token string">"BsmtFinType1"</span><span class="token punctuation">]</span>
X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">"None"</span><span class="token punctuation">)</span>
cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"GarageYrBlt"</span><span class="token punctuation">,</span> <span class="token string">"MasVnrArea"</span><span class="token punctuation">,</span> <span class="token string">"BsmtHalfBath"</span><span class="token punctuation">,</span> <span class="token string">"BsmtFullBath"</span><span class="token punctuation">,</span> <span class="token string">"BsmtFinSF1"</span><span class="token punctuation">,</span> <span class="token string">"BsmtFinSF2"</span><span class="token punctuation">,</span> <span class="token string">"BsmtUnfSF"</span><span class="token punctuation">,</span> <span class="token string">"TotalBsmtSF"</span><span class="token punctuation">,</span> <span class="token string">"GarageCars"</span><span class="token punctuation">]</span>
X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MasVnrType"</span><span class="token punctuation">,</span> <span class="token string">"MSZoning"</span><span class="token punctuation">,</span> <span class="token string">"Utilities"</span><span class="token punctuation">,</span> <span class="token string">"Exterior1st"</span><span class="token punctuation">,</span> <span class="token string">"Exterior2nd"</span><span class="token punctuation">,</span> <span class="token string">"SaleType"</span><span class="token punctuation">,</span> <span class="token string">"Electrical"</span><span class="token punctuation">,</span> <span class="token string">"KitchenQual"</span><span class="token punctuation">,</span> <span class="token string">"Functional"</span><span class="token punctuation">]</span>
X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"Neighborhood"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>x<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"GarageArea"</span><span class="token punctuation">,</span> <span class="token string">"LotFrontage"</span><span class="token punctuation">]</span>
X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"Neighborhood"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>x<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</pre>
<h2>Engineer features</h2>
<pre class="language-python">X<span class="token punctuation">[</span><span class="token string">"TotalSF"</span><span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token string">"GrLivArea"</span><span class="token punctuation">]</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token string">"TotalBsmtSF"</span><span class="token punctuation">]</span>
X<span class="token punctuation">[</span><span class="token string">"TotalPorchSF"</span><span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token string">"OpenPorchSF"</span><span class="token punctuation">]</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token string">"EnclosedPorch"</span><span class="token punctuation">]</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token string">"3SsnPorch"</span><span class="token punctuation">]</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token string">"ScreenPorch"</span><span class="token punctuation">]</span>
X<span class="token punctuation">[</span><span class="token string">"TotalBath"</span><span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token string">"FullBath"</span><span class="token punctuation">]</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token string">"BsmtFullBath"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">"BsmtHalfBath"</span><span class="token punctuation">]</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token string">"HalfBath"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</pre>
<h2>Categorize <code>MSSubClass</code> and <code>YrSold</code></h2>
<p>Looking at its description below, the levels of <code>MSSubClass</code> don't seem to have a natural ordering, so we'll represent it as a categorical, rather than numerical, feature.</p>
<pre class="output">MSSubClass: Identifies the type of dwelling involved in the sale.   

        20  1-STORY 1946 &amp; NEWER ALL STYLES
        30  1-STORY 1945 &amp; OLDER
        40  1-STORY W/FINISHED ATTIC ALL AGES
        45  1-1/2 STORY - UNFINISHED ALL AGES
        50  1-1/2 STORY FINISHED ALL AGES
        60  2-STORY 1946 &amp; NEWER
        70  2-STORY 1945 &amp; OLDER
        75  2-1/2 STORY ALL AGES
        80  SPLIT OR MULTI-LEVEL
        85  SPLIT FOYER
        90  DUPLEX - ALL STYLES AND AGES
       120  1-STORY PUD (Planned Unit Development) - 1946 &amp; NEWER
       150  1-1/2 STORY PUD - ALL AGES
       160  2-STORY PUD - 1946 &amp; NEWER
       180  PUD - MULTILEVEL - INCL SPLIT LEV/FOYER
       190  2 FAMILY CONVERSION - ALL STYLES AND AGES
</pre>
<p>We'll also represent <code>YrSold</code> as a categorical feature, to allow for a more flexible relationship with <code>SalePrice</code> (especially important because of the <a href="https://en.wikipedia.org/wiki/Financial_crisis_of_2007%E2%80%932008">2008 financial crisis</a>).</p>
<pre class="language-python">cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MSSubClass"</span><span class="token punctuation">,</span> <span class="token string">"YrSold"</span><span class="token punctuation">]</span>
X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">)</span>
</pre>
<h2>Transform features</h2>
<p>To better exploit any seasonality in <code>SalePrice</code>, we transform <code>MoSold</code> (which is a cyclical feature) using the method described <a href="http://blog.davidkaleko.com/feature-engineering-cyclical-features.html">here</a>.</p>
<pre class="language-python">X<span class="token punctuation">[</span><span class="token string">"SinMoSold"</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> X<span class="token punctuation">[</span><span class="token string">"MoSold"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">12</span><span class="token punctuation">)</span>
X<span class="token punctuation">[</span><span class="token string">"CosMoSold"</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> X<span class="token punctuation">[</span><span class="token string">"MoSold"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">12</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> X<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"MoSold"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</pre>
<p>We then transform highly skewed features using <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.boxcox1p.html"><code>boxcox1p</code></a> and <a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.boxcox_normmax.html"><code>boxcox_normmax</code></a>, and scale features using <a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.RobustScaler.html"><code>RobustScaler</code></a>.</p>
<pre class="language-python">skew <span class="token operator">=</span> X<span class="token punctuation">.</span>skew<span class="token punctuation">(</span>numeric_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cols <span class="token operator">=</span> skew<span class="token punctuation">[</span>skew <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index
<span class="token keyword">for</span> col <span class="token keyword">in</span> cols<span class="token punctuation">:</span>
    X<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> boxcox1p<span class="token punctuation">(</span>X<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">,</span> boxcox_normmax<span class="token punctuation">(</span>X<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</pre>
<pre class="language-python">cols <span class="token operator">=</span> X<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>np<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span>columns
X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span> <span class="token operator">=</span> RobustScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">)</span>
</pre>
<p>Lastly, we use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html"><code>pd.get_dummies</code></a> to convert all categorical variables into dummy variables.</p>
<pre class="language-python">X <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
</pre>
<h2>Recover training and test features</h2>
<pre class="language-python">X_train <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>train<span class="token punctuation">.</span>index<span class="token punctuation">]</span>
X_test <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>test<span class="token punctuation">.</span>index<span class="token punctuation">]</span>
</pre>
<h2>Remove outliers from training data</h2>
<p>To remove outliers, we fit a linear model to the training data and remove examples with a studentized residual greater than 3.</p>
<pre class="language-python">residuals <span class="token operator">=</span> y_train <span class="token operator">-</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>
outliers <span class="token operator">=</span> residuals<span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>zscore<span class="token punctuation">(</span>resids<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index
</pre>
<pre class="language-python">outliers
</pre>
<pre class="output">Int64Index([31, 89, 108, 432, 463, 496, 582, 589, 633, 689, 729, 775, 875, 969, 971, 1063, 1213, 1325, 1433, 1454], dtype='int64', name='Id')
</pre>
<pre class="language-python">X_train <span class="token operator">=</span> X_train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>outliers<span class="token punctuation">)</span>
y_train <span class="token operator">=</span> y_train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>outliers<span class="token punctuation">)</span>
</pre>
<h2>Define <code>random_search</code></h2>
<p>We'll use a random search to optimize hyperparameters for each of our models. Since we don't have much data, we'll use 5-fold cross-validation (instead of a validation set) to score each iteration.</p>
<pre class="language-python">kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
rmse <span class="token operator">=</span> <span class="token keyword">lambda</span> y<span class="token punctuation">,</span> y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>
scorer <span class="token operator">=</span> make_scorer<span class="token punctuation">(</span>rmse<span class="token punctuation">,</span> greater_is_better<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</pre>
<pre class="language-python"><span class="token keyword">def</span> <span class="token function">random_search</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> grid<span class="token punctuation">,</span> n_iter<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n_jobs <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    search <span class="token operator">=</span> RandomizedSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> grid<span class="token punctuation">,</span> n_iter<span class="token punctuation">,</span> scorer<span class="token punctuation">,</span> n_jobs<span class="token operator">=</span>n_jobs<span class="token punctuation">,</span> cv<span class="token operator">=</span>kf<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
</pre>
<h2>Optimize stacked ensemble</h2>
<p>The code below optimizes 5 base learners and then a stacked ensemble of them.</p>
<pre class="language-python">ridge_search <span class="token operator">=</span> random_search<span class="token punctuation">(</span>Ridge<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"alpha"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
lasso_search <span class="token operator">=</span> random_search<span class="token punctuation">(</span>Lasso<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"alpha"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
svr_search <span class="token operator">=</span> random_search<span class="token punctuation">(</span>SVR<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"C"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gamma"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0.00001</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"epsilon"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
lgbm_search <span class="token operator">=</span> random_search<span class="token punctuation">(</span>LGBMRegressor<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"colsample_bytree"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"learning_rate"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
gbm_search <span class="token operator">=</span> random_search<span class="token punctuation">(</span>GradientBoostingRegressor<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"max_features"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"learning_rate"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</pre>
<pre class="language-python">models <span class="token operator">=</span> <span class="token punctuation">[</span>search<span class="token punctuation">.</span>best_estimator_ <span class="token keyword">for</span> search <span class="token keyword">in</span> <span class="token punctuation">[</span>ridge_search<span class="token punctuation">,</span> lasso_search<span class="token punctuation">,</span> svr_search<span class="token punctuation">,</span> lgbm_search<span class="token punctuation">,</span> gbm_search<span class="token punctuation">]</span><span class="token punctuation">]</span>
stack_search <span class="token operator">=</span> random_search<span class="token punctuation">(</span>StackingCVRegressor<span class="token punctuation">(</span>models<span class="token punctuation">,</span> Ridge<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv<span class="token operator">=</span>kf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"meta_regressor__alpha"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> n_iter<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
models<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stack_search<span class="token punctuation">.</span>best_estimator_<span class="token punctuation">)</span>
</pre>
<h2>Create submission</h2>
<p>We store the predictions of the base learners and stacked ensemble in a list and add predictions from <a href="https://www.kaggle.com/paulorzp/blend-linear-regressors">paulorzp's kernel</a> which, as of writing, ranks about 820th with a score of 0.11563.</p>
<pre class="language-python">preds <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span> <span class="token keyword">for</span> model <span class="token keyword">in</span> models<span class="token punctuation">]</span>
preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"blend-linear-regressors.csv"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"SalePrice"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</pre>
<p>We create our submission by averaging <code>preds</code>, giving weights of 0.1 to each of the base learners and 0.25 to the ensemble and paulorzp's submission.</p>
<pre class="language-python">preds <span class="token operator">=</span> np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> weights<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
submission <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"Id"</span><span class="token punctuation">:</span> sample<span class="token punctuation">[</span><span class="token string">"Id"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"SalePrice"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
submission<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"submission.csv"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</pre>
<p>It achieves a score of 0.11488 which, as of writing, ranks about 550th, just inside the top 10%.</p>
</div><hr><h2>My email list</h2><form action="https://jackdry.com/subscribe" method="POST"><label for="name">Name</label><input type="text" name="name"><label for="email">Email</label><input type="email" name="email"><input type="submit" value="Subscribe"></form><hr><h2>Any thoughts?</h2><p>Comment with <a href="https://jackdry.com/auth/twitter">twitter</a> or <a href="https://jackdry.com/auth/reddit">reddit</a>.</p><hr><h2 id="comments">Comments</h2><p>No comments.</p><hr></div></div><footer><ul class="nav"><li><a class="hu" href="https://jackdry.com/house-prices-advanced-regression-techniques-kaggle#">top</a></li></ul><script src="./House Prices_ Advanced Regression Techniques (Kaggle)_files/App.bundle.js"></script></footer></body><span class="gr__tooltip"><span class="gr__tooltip-content"></span><i class="gr__tooltip-logo"></i><span class="gr__triangle"></span></span></html>